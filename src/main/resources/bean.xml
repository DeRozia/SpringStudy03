<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring管理-->
    <!--spring对bean的管理细节
         1.创建bean的三种方式
         2.bean对象的作用范围
         3.bean对象的生命周期
    -->
    <!--创建bean的三种方法-->
    <!--第一种方式：使用默认构造函数创建
              在spring的配置文件中适用bean标签，配以ID和class属性之后，且没有其他标签和属性时
              采用的就是默认构造函数创建bean对象，此时如果没有默认构造函数，则对象无法创建。
    <bean id="accountService" class="service.impl.AccountServiceImpl"></bean>
    -->

    <!--第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并且存入spring容器中）
               该类通常是jar包中的class，无法通过编译修改
    <bean id="instancefactory" class="factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instancefactory" factory-method="getAccountService"></bean>
    -->


    <!--第三种方法：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并且存入spring容器中）
                该类通常是jar包中的class，无法通过编译修改
    <bean id="accountService" class="factory.StaticFactory" factory-method="getAccountService"></bean>
    -->
    <!--bean的作用范围调整：
       bean标签的scope属性：
        作用：用于指定bean的作用范围
        取值：
            singleton:单例（默认）
            prototype:多例
            request:作用于web应用的请求范围
            session：作用于web应用的会话范围
            global—session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，==session

    -->
    <!--bean对象的生命周期：
         单例对象：
          出生：当容器创建时对象出生
          活着：只要容器还在，对象一直存在
          死亡：容器销毁，对象死亡
          即：单例对象的生命周期和容器相同
         多利对象：
          出生：当我们使用对象时spring框架为我们创建
          活着：对象在使用的过程中一直活着
          死亡：当对象长时间不用且没有别的对象应用的时候，被java回收机制销毁
    -->


    <bean id="accountService" class="service.impl.AccountServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"></bean>
</beans>